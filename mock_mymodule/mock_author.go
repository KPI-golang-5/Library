// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KPI-golang-5/Library/pkg/repositories (interfaces: AuthorRepository)

// Package mock_mymodule is a generated GoMock package.
package mock_mymodule

import (
	reflect "reflect"

	models "github.com/KPI-golang-5/Library/pkg/models"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthorRepository) Create(arg0 *models.Author) *models.Author {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Author)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuthorRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockAuthorRepository) Delete(arg0 int64) models.Author {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(models.Author)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthorRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthorRepository)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockAuthorRepository) GetAll(arg0 string) []models.Author {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]models.Author)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAuthorRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAuthorRepository)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockAuthorRepository) GetById(arg0 int64) (*models.Author, *gorm.DB) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*models.Author)
	ret1, _ := ret[1].(*gorm.DB)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAuthorRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAuthorRepository)(nil).GetById), arg0)
}
