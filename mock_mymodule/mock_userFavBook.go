// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KPI-golang-5/Library/pkg/repositories (interfaces: UserFavBookRepository)

// Package mock_mymodule is a generated GoMock package.
package mock_mymodule

import (
	reflect "reflect"

	models "github.com/KPI-golang-5/Library/pkg/models"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockUserFavBookRepository is a mock of UserFavBookRepository interface.
type MockUserFavBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserFavBookRepositoryMockRecorder
}

// MockUserFavBookRepositoryMockRecorder is the mock recorder for MockUserFavBookRepository.
type MockUserFavBookRepositoryMockRecorder struct {
	mock *MockUserFavBookRepository
}

// NewMockUserFavBookRepository creates a new mock instance.
func NewMockUserFavBookRepository(ctrl *gomock.Controller) *MockUserFavBookRepository {
	mock := &MockUserFavBookRepository{ctrl: ctrl}
	mock.recorder = &MockUserFavBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFavBookRepository) EXPECT() *MockUserFavBookRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserFavBookRepository) Create(arg0 *models.UserFavBook) *models.UserFavBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.UserFavBook)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserFavBookRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserFavBookRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockUserFavBookRepository) Delete(arg0 int64) models.UserFavBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(models.UserFavBook)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserFavBookRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserFavBookRepository)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockUserFavBookRepository) GetAll() []models.UserFavBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.UserFavBook)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserFavBookRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserFavBookRepository)(nil).GetAll))
}

// GetAllByUserId mocks base method.
func (m *MockUserFavBookRepository) GetAllByUserId(arg0 int64) []models.UserFavBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserId", arg0)
	ret0, _ := ret[0].([]models.UserFavBook)
	return ret0
}

// GetAllByUserId indicates an expected call of GetAllByUserId.
func (mr *MockUserFavBookRepositoryMockRecorder) GetAllByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserId", reflect.TypeOf((*MockUserFavBookRepository)(nil).GetAllByUserId), arg0)
}

// GetById mocks base method.
func (m *MockUserFavBookRepository) GetById(arg0 int64) (*models.UserFavBook, *gorm.DB) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*models.UserFavBook)
	ret1, _ := ret[1].(*gorm.DB)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserFavBookRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserFavBookRepository)(nil).GetById), arg0)
}
